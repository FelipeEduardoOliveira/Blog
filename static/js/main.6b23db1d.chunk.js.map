{"version":3,"sources":["firebase.js","component/home/index.js","component/404/index.js","component/login/index.js","component/register/index.js","component/dash/index.js","component/newPost/index.js","component/header/index.js","App.js","serviceWorker.js","index.js"],"names":["firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firebase","initializeApp","this","banco","database","storage","email","pass","auth","signInWithEmailAndPassword","nome","createUserWithEmailAndPassword","uid","currentUser","ref","child","set","senha","Promise","resolve","onAuthStateChanged","signOut","callback","once","then","desc","img","name","title","post","chave","push","key","descricao","imagem","titulo","Home","props","state","on","snapshot","forEach","childItem","id","val","reverse","setState","className","map","src","alt","Component","notFound","to","Login","login","a","loginInput","passwordInput","history","replace","catch","error","code","alert","message","alerta","callAlert","bind","entrar","getCurrent","e","preventDefault","onSubmit","type","value","onChange","target","onFocus","placeholder","onClick","withRouter","SingIn","onRegister","register","autoFocus","autoComplete","Dash","logOut","console","log","massege","localStorage","removeItem","getName","info","Post","newPost","url","hundleFile","image","files","hundleUpload","getCurrentUid","Uploadtask","put","progress","Math","round","bytesTransferred","totalBytes","getDownloadURL","link","cadastraPost","getItem","window","confirm","width","height","max","Header","App","initializeFire","initializeUser","result","exact","path","component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6b23db1d.chunk.js","sourcesContent":["import firebase from 'firebase';\r\nimport 'firebase/database'; // importando o banco de dados\r\nimport 'firebase/auth'; //importando a autenticação\r\nimport 'firebase/storage'; //importando o Storage\r\n\r\n\r\n    //configuração do firebase\r\n        let firebaseConfig = {\r\n    apiKey: \"AIzaSyBPYRZPwm0M1No5k9c5qw9O4QR5AChN_lg\",\r\n    authDomain: \"consumoteste-2c7cf.firebaseapp.com\",\r\n    databaseURL: \"https://consumoteste-2c7cf.firebaseio.com\",\r\n    projectId: \"consumoteste-2c7cf\",\r\n    storageBucket: \"consumoteste-2c7cf.appspot.com\",\r\n    messagingSenderId: \"405102806284\",\r\n    appId: \"1:405102806284:web:eb140433c250689b3b7529\",\r\n    measurementId: \"G-PCFPGG3G3E\"\r\n  };\r\n  \r\n  //inicio da classe firebase\r\nclass Firebase{\r\n    constructor(){\r\n        firebase.initializeApp(firebaseConfig); // Initialize Firebase\r\n        this.banco = firebase.database(); // usando a variavel banco para armazenar o dataBase\r\n\r\n        this.storage = firebase.storage();  //usando a variavel storage para armazenar o storage;\r\n    }\r\n\r\n        //Função de login\r\n    login(email,pass){\r\n        return firebase.auth().signInWithEmailAndPassword(email, pass)\r\n    }\r\n    //Funcunção de registro\r\n    async register(nome, email, pass){\r\n        await firebase.auth().createUserWithEmailAndPassword(email, pass)\r\n\r\n        const uid = firebase.auth().currentUser.uid\r\n\r\n        return firebase.database().ref('usuarios').child(uid).set({\r\n            nome: nome,\r\n            email: email,\r\n            senha: pass\r\n        })\r\n    }\r\n\r\n    //função verificação de usuario\r\n   initializeUser(){\r\n            return new Promise(resolve =>{\r\n                firebase.auth().onAuthStateChanged(resolve);\r\n            })\r\n    }\r\n    // função para pegar o email do usuario logado\r\n    getCurrent(){\r\n        return firebase.auth().currentUser && firebase.auth().currentUser.email\r\n    }\r\n    // função para pegar o Id do usuario logado\r\n    getCurrentUid(){\r\n        return firebase.auth().currentUser && firebase.auth().currentUser.uid\r\n    }\r\n        // função para pegar deslogar o usuario\r\n    async logOut(){\r\n        await firebase.auth().signOut();\r\n        // alert('Deslogado com sucesso')\r\n    }\r\n    // função para pegar o nome do usuario logado\r\n    async getName(callback){\r\n        if(!firebase.auth().currentUser){\r\n            return null\r\n        }\r\n            const uid = firebase.auth().currentUser.uid;\r\n\r\n            await firebase.database().ref('usuarios').child(uid)\r\n            .once('value').then(callback);\r\n        \r\n    }\r\n    // função para cadastrar um post\r\n    async newPost(desc, img, name, title){\r\n        const post = firebase.database().ref('posts');\r\n        const chave = post.push().key;\r\n        await post.child(chave).set({\r\n            descricao: desc,\r\n            imagem: img,\r\n            nome: name,\r\n            titulo: title\r\n        })\r\n        }\r\n}\r\n\r\nexport default new Firebase();","import React, {Component} from 'react';\r\nimport firebase from '../../firebase';\r\nimport './home.css'\r\n\r\n\r\nclass Home extends Component {\r\n        constructor(props){\r\n            super(props);\r\n            this.state = {\r\n                post: []\r\n            }\r\n\r\n            \r\n        }\r\n\r\n        componentDidMount(){\r\n\r\n            \r\n             \r\n            firebase.banco.ref('posts').on('value', (snapshot)=>{\r\n                let state = this.state;\r\n                state.post = [];\r\n                \r\n                snapshot.forEach((childItem) => {\r\n                    state.post.push({\r\n                        id: childItem.key,\r\n                        nome: childItem.val().nome,\r\n                        descricao: childItem.val().descricao,\r\n                        img: childItem.val().imagem,\r\n                        titulo: childItem.val().titulo\r\n                    })\r\n                    \r\n                });\r\n                state.post.reverse();\r\n                this.setState(state)\r\n                // console.log(state)\r\n            })\r\n        }\r\n    render(){\r\n        return(\r\n            <section className='post-section'>\r\n                {this.state.post.map((post)=>{\r\n                    return(\r\n                        <article className='main-post'>\r\n                            <header className='header-post'>\r\n                                <div>\r\n                                    <strong className='titulo-post'>{post.titulo}</strong>\r\n                                    <hr/>\r\n                                    <p className='autor-post'>Autor: {post.nome}</p>\r\n                                </div>\r\n                            </header>\r\n                            <div className='container-foto'>\r\n                            <img className='foto-post' src={post.img} alt='Imagem de uma caneca escrito JS'/>\r\n                            </div>\r\n                            <footer className='footer-post'>\r\n                                <h2>{post.descricao}</h2>\r\n                            </footer>\r\n                        </article>\r\n                    );\r\n                })}\r\n            </section>\r\n        );\r\n    }\r\n    \r\n}\r\n\r\nexport default Home;","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\n\r\nfunction notFound() {\r\n\r\n    return(\r\n        <div>\r\n            <h1> 404 - page notFound</h1>\r\n            <Link to='/'>Go back to home</Link>\r\n        </div>\r\n    );\r\n    \r\n}\r\n\r\nexport default notFound;","import React, {Component} from 'react';    \r\nimport { Link, withRouter, Redirect } from 'react-router-dom';\r\nimport firebase from '../../firebase';\r\nimport './login.css';\r\n\r\n\r\nclass Login extends Component{\r\n        \r\n        constructor(props){\r\n            super(props);\r\n                this.state={\r\n                    loginInput: '',\r\n                    passwordInput: '',\r\n                    alerta: false\r\n                }\r\n                this.callAlert = this.callAlert.bind(this);\r\n                this.entrar = this.entrar.bind(this);\r\n                this.login = this.login.bind(this);\r\n        }\r\n\r\n        componentDidMount(){\r\n            if(firebase.getCurrent()){\r\n                return this.props.history.replace('/dashboard');\r\n            }else{\r\n\r\n            }\r\n        }\r\n\r\n        callAlert(){\r\n            const state = this.state;\r\n\r\n            if(state.alerta === true){\r\n                state.alerta = false;\r\n                this.setState(state)\r\n            }else{\r\n                state.alerta = true;\r\n                this.setState(state)\r\n            }\r\n                }\r\n            \r\n            entrar(e){\r\n                \r\n                this.login();\r\n                e.preventDefault();\r\n                \r\n               \r\n            }\r\n\r\n            login = async() => {\r\n                const {loginInput, passwordInput} = this.state;\r\n\r\n                try {\r\n                    await firebase.login(loginInput, passwordInput)\r\n                    .then(()=>{\r\n                        this.props.history.replace('/dashboard');\r\n                    })\r\n                    .catch((error)=>{\r\n                        if(error.code === 'auth/user-not-found'){\r\n                         alert('Usuario nao existe')\r\n                         \r\n                        }else{\r\n                            alert('Código de erro: '+ error.code);\r\n                         }\r\n                         \r\n                    });\r\n\r\n                } catch (error) {\r\n                    alert(error.message)\r\n                       \r\n                }\r\n                \r\n            }\r\n        \r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                <form onSubmit={this.entrar} id='logIn' className='container-form'>\r\n                    <label> Email: \r\n                        <input type='email' value={this.state.loginInput} onChange={(e)=> this.setState({loginInput: e.target.value})} onFocus='on' placeholder='example@example.com'/>\r\n                    </label><br/>\r\n                    <label> Senha: \r\n                        <input type='password' value={this.state.passwordInput} onChange={(e)=> this.setState({passwordInput: e.target.value})} onFocus='on' placeholder='Hmsg12#'/>\r\n                    </label><br/>\r\n                    \r\n                    <button type='submit'> Login </button>\r\n\r\n                    <div className = 'links' >\r\n                    <Link className = 'register' to='/register'>Ainda não tem cadastro?</Link>\r\n                    <a className='politica_senha' onClick={this.callAlert}>politica de senha</a>\r\n                    </div>\r\n                    {this.state.alerta === true ?\r\n                    <div>\r\n                        <p>Sua senha precisa ter mais que 8 caracteres</p>\r\n                        <p>Sua senha precisa ter uma letra maiuscula</p>\r\n                        <p>Sua senha precisa ter um numero</p>\r\n                        <p>Sua senha precisa ter um caractere especial</p>\r\n                    </div>   \r\n                    :\r\n                    <div></div>\r\n                    }\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(Login);","import React, {Component, useEffect} from 'react';    \r\nimport { Link } from 'react-router-dom';\r\nimport firebase from '../../firebase';\r\nimport './register.css';\r\n\r\n\r\nclass SingIn extends Component{\r\n        \r\n        constructor(props){\r\n            super(props);\r\n                this.state={\r\n                    name:'',\r\n                    loginInput: '',\r\n                    passwordInput: ''\r\n                }\r\n\r\n                this.register = this.register.bind(this);\r\n                this.onRegister = this.onRegister.bind(this);\r\n        }\r\n\r\n        register(e){\r\n            this.onRegister();\r\n            e.preventDefault();\r\n        }\r\n\r\n        onRegister = async() =>{\r\n            const {name, loginInput, passwordInput} = this.state;\r\n\r\n            try {\r\n                await firebase.register(name, loginInput, passwordInput)\r\n                .then(()=>{\r\n                    this.props.history.replace('/dashboard');\r\n                })\r\n                .catch((error)=>{\r\n                    alert(\"Código de erro: \\n\" + error.message)\r\n                })\r\n            } catch (error) {\r\n                alert(error.message)\r\n            }\r\n        }\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n               <h1>Cadastre-se para aproveitar</h1>\r\n\r\n               <form onSubmit={this.register} className='container' id='register'>\r\n                   <label>Nome:</label>\r\n                        <input type='text' value={this.state.name} onChange={(e) => this.setState({name: e.target.value})} autoFocus='on' autoComplete='off'/>\r\n\r\n\r\n                   <label>Email:</label>\r\n                        <input type='email' value={this.state.loginInput} onChange={(e) => this.setState({loginInput: e.target.value})} autoComplete='off'/>\r\n\r\n                   <label>Senha:</label>\r\n                       <input type='text' value={this.state.passwordInput} onChange={(e) => this.setState({passwordInput: e.target.value})} autoComplete='off'/>\r\n\r\n                   <button type='submit'>Enviar</button>\r\n               </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SingIn;","import React, {Component} from 'react';\r\nimport {Link, withRouter} from 'react-router-dom';\r\nimport firebase from '../../firebase';\r\n\r\nclass Dash extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n            this.state ={\r\n                    name: localStorage.nome,\r\n            }\r\n            this.logOut = this.logOut.bind(this);\r\n        }\r\n      async componentDidMount(){\r\n            if(!firebase.getCurrent()){\r\n             this.props.history.replace('/login');\r\n            }//else{\r\n            //      alert(firebase.getCurrent() + \" Você está logado\")\r\n            // }\r\n\r\n            firebase.getName((info=>{\r\n                localStorage.nome = info.val().nome;\r\n                this.setState({name: localStorage.nome})\r\n\r\n            }))\r\n        }\r\n\r\n        logOut = async() =>{\r\n\r\n            await firebase.logOut()\r\n            .catch((error)=>{\r\n                console.log(error.massege);\r\n            })\r\n            localStorage.removeItem(\"nome\")\r\n            this.props.history.push('/')\r\n        }\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                <h1>Hello, {this.state.name}</h1>\r\n                <Link to='/dashboard/new'>Criar novo post</Link><br/>\r\n                <p>Logado com: {firebase.getCurrent()} </p>\r\n                <button onClick={this.logOut}>logOut</button>\r\n            </div>\r\n\r\n            \r\n        );\r\n    }\r\n}\r\n\r\nexport default Dash;","import React, {Component} from 'react';\r\nimport firebase from '../../firebase';\r\nimport './newpost.css';\r\n\r\n\r\nclass Post extends Component{\r\n        constructor(props){\r\n            super(props);\r\n            this.state = {\r\n                descricao: '',\r\n                img: null,\r\n                url: '',\r\n                progress: '',\r\n                nome: '',\r\n                titulo: '',\r\n                alert: ''\r\n            }\r\n            this.newPost = this.newPost.bind(this);\r\n            this.cadastraPost = this.cadastraPost.bind(this);\r\n            this.hundleFile = this.hundleFile.bind(this);\r\n            this.hundleUpload = this.hundleUpload.bind(this);\r\n        }\r\n        async componentDidMount(){\r\n            if(!firebase.getCurrent()){\r\n             this.props.history.replace('/');\r\n            }//else{\r\n            //      alert(firebase.getCurrent() + \" Você está logado\")\r\n            // }\r\n\r\n            const state = this.state;\r\n            state.nome = localStorage.getItem('nome');\r\n\r\n            this.setState(state);\r\n        }\r\n\r\n        cadastraPost(e){\r\n\r\n                if(this.state.titulo !== '' && this.state.descricao !== '' && this.state.url !== ''){\r\n                    const confirm = window.confirm('Tem certeza que desseja fazer esse post?')\r\n\r\n                if(confirm === true){\r\n                    this.newPost();\r\n\r\n                    // alert('Post realizado com sucesso!');\r\n                }\r\n                    \r\n                }else{\r\n                    this.setState({alert: 'Preencha todos os campos!'});\r\n                    // return null;\r\n                }\r\n                \r\n            e.preventDefault();\r\n        }\r\n\r\n\r\n\r\n        newPost = async()=>{\r\n            const {descricao, url, nome, titulo} = this.state;\r\n\r\n           await firebase.newPost(descricao, url, nome, titulo)\r\n            .then(()=>{\r\n                this.setState({\r\n                    descricao: '',\r\n                    titulo: ''\r\n                })\r\n    \r\n                alert('Publicação realizada com sucesso!')\r\n            })\r\n            .catch((error)=>{\r\n                alert(error.message)\r\n            })\r\n            \r\n            \r\n        }\r\n\r\n        hundleFile = async(e)=>{\r\n            const image = e.target.files[0];\r\n            if(image.type === 'image/png' || image.type === 'image/jpeg' || image.type === 'image/jpg' )\r\n            {\r\n                await this.setState({img: image});\r\n                this.hundleUpload();\r\n\r\n            }else{\r\n                alert('imagem inválida! ');\r\n                this.setState({img: null})\r\n\r\n            }\r\n        }\r\n\r\n        hundleUpload= async()=>{\r\n            const {img} = this.state;\r\n            const uid = firebase.getCurrentUid();\r\n\r\n            const Uploadtask = firebase.storage.ref(`imagem/${uid}/${img.name}`)\r\n            .put(img);\r\n\r\n            await Uploadtask.on('state_changed',\r\n            (snapshot)=>{\r\n                //progress\r\n                const progress = Math.round((snapshot.bytesTransferred / snapshot.totalBytes) * 100);\r\n                this.setState({progress: progress});\r\n            },\r\n            (error)=>{\r\n                alert('Erro: ' + error)\r\n            },\r\n            ()=>{\r\n                //sucesso\r\n                firebase.storage.ref(`imagem/${uid}`)\r\n                .child(img.name).getDownloadURL()\r\n                .then((link) =>{\r\n                    this.setState({url: link})\r\n                })\r\n            })\r\n        }\r\n\r\n        render(){\r\n            return(\r\n                <div>\r\n                  \r\n                    <form id='form-post' onSubmit={this.cadastraPost}>\r\n                             <span>{this.state.alert}</span>\r\n\r\n                             <input type='file' onChange={this.hundleFile}/>\r\n\r\n                             {this.state.url !== '' ?\r\n                             <img src={this.state.url} width=\"150\" height=\"100\"/>\r\n                             :\r\n                            <progress value={this.state.progress} max='100'/>\r\n                            }\r\n                        <label>Titulo:</label>\r\n                        <input type='text' value={this.state.titulo} placeholder='Titulo do post' onChange={(e)=> this.setState({titulo: e.target.value})}/>\r\n\r\n                        {/* <label>Url da imagem:</label>\r\n                        <input type='text' value={this.state.img} placeholder='Url da imagem desejada' onChange={(e)=> this.setState({img: e.target.value})}/> */}\r\n\r\n                        <label>Descrição:</label>\r\n                        <textarea type='text' value={this.state.descricao} placeholder='Descrição do post' onChange={(e)=> this.setState({descricao: e.target.value})}/>\r\n\r\n                        <button type='submit'>Enviar</button>\r\n                        \r\n                    </form>\r\n                    \r\n                </div>\r\n            );\r\n        }\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport './header.css';\r\n\r\nfunction Header() {\r\n    return(\r\n        <header className='main-header'>\r\n           <div className='header-content'>\r\n               <Link to='/'>\r\n               Blog do Oliveira\r\n               </Link>\r\n               <Link to='/login'>\r\n               Entrar\r\n               </Link>\r\n           </div>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\nimport {BrowserRouter, Switch, Route} from 'react-router-dom';\nimport firebase from './firebase';\nimport './global.css';\n\nimport Home from './component/home';\nimport notFound from './component/404';\nimport Login from './component/login';\nimport SingIn from './component/register';\nimport Dash from './component/dash';\nimport Post from './component/newPost';\n\nimport Header from './component/header';\n\nclass App extends Component {\n\n    constructor(props){\n      super(props);\n      this.state = {\n        initializeFire: false\n      }\n    }\n    //verifico se o firebase foi iniciado com sucesso\n    componentDidMount(){\n     firebase.initializeUser().then(result=>{\n       this.setState({initializeFire: result})\n       \n     })\n    }\n\n  render(){\n    //se o firebase foi iniciado, mostramos as rotas\n    return this.state.initializeFire !== false ? (\n      <BrowserRouter>\n          <Header/>\n        <Switch>\n            <Route exact path=\"/\" component={Home}/>\n            <Route exact path=\"/login\" component={Login}/>\n            <Route exact path=\"/register\" component={SingIn}/>\n            <Route exact path=\"/dashboard\" component={Dash}/>\n            <Route exact path=\"/dashboard/new\" component={Post}/>\n                        \n            <Route path=\"*\" component={notFound}/>\n        </Switch>\n      </BrowserRouter>\n\n    ) :(\n      //se o firebase nao foi iniciado, mostramos uma tela de loading\n      <h1>Carregando...</h1>\n    )\n  }\n    \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}